此部分代码先实现前进：（“？”表示等待实践验证）
1、可让IO口输出高低电平来控制？
2、还是必须得用PWM输出（l298N的EN端 OR IN端？）：
改变CCRx的值，就可以改变PWM输出的占空比，改变ARR的值，就可以改变PWM输出的频率，这就是PWM输出的原理。
（除了TIM6、7，其他定时器都能产生PWM输出，其中高级定时器1和8能产生7路PWM输出，通用定时器2-5能产生4路）



代码：（控制一个电机，其余电机类似）
1、硬核控制法（理论上delay时间够短可实现控速，即模拟PWM输出？）
#include "sys.h"
#include "usart.h"		
#include "delay.h"	 

int main(void)
{				 
	delay_init(72);
	RCC->APB2ENR|=1<<2;
	GPIOA->CRH&=0xFFFFFF00;
	GPIOA->CRH|=0x00000033;
	PAout(8)=0;
	PAout(9)=0;
	while(1)
	{
		PAout(8)=1;
		delay_ms(1500);
		PAout(8)=0;
		delay_ms(1500);
		PAout(9)=1;
		delay_ms(1500);
		PAout(9)=0;
		delay_ms(1500);
	}
} 






2、PWM输出控制（输出的PWM波接EN端 OR IN端，百度大佬人云亦云？）
#include "sys.h"
#include "usart.h"		
#include "delay.h"	 

int main(void)
{				
	Stm32_Clock_Init(9);
	delay_init(72);
	RCC->APB1ENR|=1<<0;
	RCC->APB2ENR|=1<<2;
	GPIOA->CRL&=0xFFF0FFF0;
	GPIOA->CRL|=0x0003000B;
	PAout(4)=0;
	TIM2->ARR=7199;
	TIM2->PSC=0;
	TIM2->CCMR1|=6<<4;
	TIM2->CCMR1|=1<<3;
	TIM2->CCER|=1<<0;
	TIM2->CR1=0x0080;
	TIM2->CR1|=1<<0;
	while(1)
	{
		TIM2->CCR1=3600;
		delay_ms(1500);
		delay_ms(1500);
		TIM2->CCR1=0;
		delay_ms(1500);
		TIM2->CCR1=1800;
		delay_ms(1500);
		delay_ms(1500);
		TIM2->CCR1=0;
		delay_ms(1500);
		TIM2->CCR1=900;
		delay_ms(1500);
		delay_ms(1500);
		TIM2->CCR1=0;
		delay_ms(1500);
	}
}
